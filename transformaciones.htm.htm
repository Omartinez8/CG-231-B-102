<!DOCTYPE html>
<html>
    <head>
        <title>Taller de computacion grafica</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #00e1ff;
            }
        </style>
    </head>
    <body>
        <div id="text">Omar Santiago Martínez Pachón<br/>
            Computación Grafica<br/>
            Cubo <br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

    function init() 
    {

        //Set up the scene
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );  ///0xAA0000
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Create a guide (guilla)
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Create axes
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
            
        //Camera
        camera.position.x = 000;
        camera.position.y = 100;
        camera.position.z = 400;
        camera.lookAt(scene.position);

        //Create objects

        //Funtion to generate a cube
        
        function Crear_Cubo(posini, lado, color)
        { 
            /**
             * Para crear el cubo se usan dos parametos: 
             * 1. El arreglo posini[x0, y0, z0] donde se definen la posicion inicial del cubo
             * 2. La variable lado para definir la longitud del lado
             * 
             * A las posiciones iniciales se les suma la mitad del lado para asi generar el cubo
            **/
            var geometry = new THREE.Geometry();
            var vertices = [
                new THREE.Vector3((posini[0] + lado/2), (posini[1] + lado/2), (posini[2] + lado/2)),
                new THREE.Vector3(lado, (posini[1] + lado/2), (posini[2] + lado/2)),
                new THREE.Vector3(lado, lado, (posini[2] + lado/2)),
                new THREE.Vector3((posini[0] + lado/2), lado, (posini[2] + lado/2)),
                new THREE.Vector3((posini[0] + lado/2), (posini[1] + lado/2), lado),
                new THREE.Vector3(lado, (posini[1] + lado/2), lado),
                new THREE.Vector3(lado, lado, lado),
                new THREE.Vector3((posini[0] + lado/2), lado, lado)
            ];

         
            
            var aristas = [

                [0, 1], [1, 2], [2, 3], [3, 0], 
                [4, 5], [5, 6], [6, 7], [7, 4], 
                [0, 4], [1, 5], [2, 6], [3, 7], 

            ];

            
            var geometry = new THREE.Geometry();
            var material = new THREE.LineBasicMaterial({ color: color });

           
            for (var i = 0; i < aristas.length; i++) {
                var edge = aristas[i];
                geometry.vertices.push(vertices[edge[0]], vertices[edge[1]]);
            }

            var cubo = new THREE.LineSegments(geometry, material);
        
            return cubo;
        }

        //Crear cUBO

        var lado = 40; 
        //CUBO ORIGINAL 
        var cube = Crear_Cubo([0, 0, 0], lado, 0xff0000);
        //CUBO TRASLASION
        var cube_T = Crear_Cubo([0, 0, 0], lado, 0x00ff00);
        //CUBO ESCALADO
        var cube_E = Crear_Cubo([0, 0, 0], lado, 0x00ffff);
        //CUBO ROTADO
        var cube_R = Crear_Cubo([0, 0, 0], lado, 0X0000ff);
        //CUBO CON LAS 3 TRASNFORMADAS
        var cube_F = Crear_Cubo([0, 0, 0], lado, 0xffff00);

        //Matriz de traslacion 
        var traslacion = new THREE.Matrix4();
        traslacion.set(1, 0, 0, 2*lado,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);

            cube_T.applyMatrix(traslacion);
            cube_F.applyMatrix(traslacion);

        //Matriz de escalado
        var escalado = new THREE.Matrix4();
        escalado.set(1.5, 0, 0, 0,
                0, 1.5, 0, 0,
                0, 0, 1.5, 0,
                0, 0, 0, 1.5);

            cube_E.applyMatrix(escalado);
            cube_F.applyMatrix(escalado);

        //Matriz de rotacion
        var pi = 3.14159265359
        var rotacionX = new THREE.Matrix4();
        var alpha = pi/4;
        var cs = Math.cos(alpha);   
        var ss = Math.sin(alpha);

        rotacionX.set(1,  0, 0, 0,
                0, cs, -ss, 0, 
                0, ss, cs, 0,
                0, 0, 0, 1);	

            cube_R.applyMatrix(rotacionX);
            cube_F.applyMatrix(rotacionX);

        document.body.appendChild(renderer.domElement);
        
        
        //Añadir los elementos creados a la escena
        scene.add(cube);
        scene.add(cube_T);
        scene.add(cube_E);
        //scene.add(cube_R);
        scene.add(cube_F);
        scene.add(gridHelperXZ);

        renderer.render(scene, camera);
    }

    init();  
    
    </script>
  </body>
</html>